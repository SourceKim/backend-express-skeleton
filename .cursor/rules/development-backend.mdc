---
description: 后端开发习惯，开发 Express 后端，尤其是添加新的功能、模块的时候调用
globs: 
alwaysApply: false
---
# 描述

# 后端命名规范

1. 数据库字段命名用 _ 分隔 created_at
2. 变量命名统一用大驼峰命名法 myVar
3. 环境变量、静态变量使用全大写 MY_ENV_VAR

# 目录结构

* migrations/  -迁移目录
* public/ - 静态文件目录
* uploads/ - 上传文件的目录
* scripts/ -  脚本，比如初始化管理员等脚本，会在 package.json 中创建一条对应的指令
* src/ -  核心代码目录

  * configs/ - 配置文件，包含日志、数据库、环境变量、swagger 等配置

    * database.config.ts
    * swagger.config.ts
    * env.config.ts
  * routes/ - 路由

    * user.routes.ts
  * models/ - 模型，typeorm 实体

    * base.model.ts
    * user.model.ts
  * dtos/ -  数据传输封装对象

    * common.dto.ts
    * user.dto.ts
  * docs/ -  swagger 描述文件

    * common.docs.ts
    * user.docs.ts
  * controllers/ - 控制器

    * user.controllers.ts
  * services/ - 服务

    * user.services.ts
  * middlewares/ - 中间件

    * auth.middleware.ts
    * logger.middleware.ts
    * error.middleware.ts
  * types/ - 类的声明 & 拓展

    * express.d.ts - 扩展了 Express 的 Request 接口，添加了 user 属性
  * utils / - 工具

    * logger.utils.ts
    * date.utils.ts
  * app.ts - 程序的配置，对 Express 进行配置，比如启用中间件等
  * server.ts - 程序的**主入口，在此处加载环境变量 &amp; 连接数据库**

# 业务新增流程

### 1. 确认业务业务逻辑 & 业务接口

### 2. 根据业务逻辑将需要的 api 定义到 @routes 目录之下

#### API 实现注意事项

1. API 遵循 RESTFul 的写法，注意定义 CRUD
2. 区分  admin 的 api & 非 admin 的 api
3. 注意权限管理，加入类似 auth 的中间件

#### 示例

### 3. 定义业务 model， 也就是 typeorm 的 Entity，放在 @models 目录下

#### 注意事项

1. id 主键使用 string 类型，实体类型为 uuid，由 nanoid 生成
2. 使用 `class-validator` 添加类型验证
3. 所有 Entity 都继承 BaseEntity，包含 `id` & `created_at` & `updated_at` & `deleted_at` 字段
4. 将实体添加到 @database.config.ts 中
5. 在 @migrations 中生成迁移文件，当 Entity 存在依赖关系时，注意**调整迁移文件的名字以保证被依赖的表先被创建**

#### 示例

### 4. 定义数据接收 & 传输的 DTO

#### 注意事项

1. 对于请求的 DTO，在必要时加入 `class-validator` 类型验证
2. 对于响应的 DTO，统一都继承自 `ApiResponse`，用以统一响应格式

    ```
    /**
     * API响应接口
     * 用于统一API响应格式
     */
    export interface ApiResponse<T> {
        code: number; // 0: 成功, 其他: 失败
        message?: string;
        data?: T;
        error?: any;
    } 
    ```

3. 对于分页的请求和响应，统一使用 `PaginationQueryDto` & `PaginatedResponse`

    ```
    /**
     * 分页查询DTO
     * 用于分页查询的参数验证
     */
    export class PaginationQueryDto {
        @IsInt()
        @Min(1)
        @IsOptional()
        page?: number = 1;

        @IsInt()
        @Min(1)
        @IsOptional()
        limit?: number = 20;

        @IsString()
        @IsOptional()
        sort_by?: string = 'created_at';

        @IsEnum(['ASC', 'DESC'])
        @IsOptional()
        sort_order?: 'ASC' | 'DESC' = 'DESC';

        static fromRequest(query: any): PaginationQueryDto {
            return {
                page: parseInt(query.page as string) || 1,
                limit: parseInt(query.limit as string) || 20,
                sort_by: query.sort_by || 'created_at',
                sort_order: (query.sort_order as ||    }
    }

    * exp{
        items: T[];
        meta: {
            total: number;
            page: number;
            limit: number;
            pages: number;
            sort_by?: string;
            sort_order?: 'ASC' | 'DESC';
        };
    }
    ```

#### 示例

### 5. 根据已有的 DTO & Routes 补充 swagger 文档到 @docs 中

### 6. 根据 Routes 实现对应的 controller，放到 @controllers 目录之下

#### 注意事项

1. Controller 负责任务的委派 & 分发，即调用 service 去实现
2. Controller 负责解析 query，并将结果通过参数传入 service
3. Controller 负责处理 Response，包括错误处理，分页数据的组装逻辑也在这里进行封装返回
4. Controller 的实现要加入 try-catch，并且在 catch 到错误的时候，调用 next 用错误处理中间件统一处理错误

### 7. 根据 Controller 实现 service，放到 @services 目录下

1. 负责与数据库进行交互
2. 处理业务逻辑
3. 对于复杂业务 or 过长的业务，建议分开多个 services，比如 order.xxx.service.ts & order.yyy.service.ts